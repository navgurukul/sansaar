[
	{
		"component": "header",
		"variant": 2,
		"value": "Example 5"
	},
	{
		"component": "text",
		"value": "<span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">Magic Square</span> is that kind of square in which sum of each row, sum of each column and sum of both the diagonals is equal.   "
	},
	{
		"component": "text",
		"value": "You have to write this program that takes a <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">nested list</span> as <span style=\"\">input</span> and checks whether it is a <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">magic square</span> or not? "
	},
	{
		"component": "text",
		"value": "This is a <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">magic square</span> because, "
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "N = 3<br># Returns true if mat[][] is magic<br># square, else returns false.<br>def isMagicSquare(mat) :<br># calculate the sum of the prime diagonal<br>&emsp;s = 0<br>&emsp;for i in range(0, N) :<br>&emsp;&emsp;s = s + mat[i][i]<br>&emsp;# For sums of Rows<br>&emsp;for i in range(0, N) :<br>&emsp;&emsp;rowSum = 0<br>&emsp;&emsp;for j in range(0, N) :<br>&emsp;&emsp;&emsp;rowSum += mat[i][j]<br>&emsp;&emsp;# check if every row sum is<br>&emsp;&emsp;# equal to prime diagonal sum<br>&emsp;&emsp;if (rowSum != s) :<br>&emsp;&emsp;&emsp;return False<br>&emsp;# For sums of Columns<br>&emsp;for i in range(0, N):<br>&emsp;&emsp;colSum = 0<br>&emsp;&emsp;for j in range(0, N) :<br>&emsp;&emsp;&emsp;colSum += mat[j][i]<br>&emsp;&emsp;# check if every column sum is<br>&emsp;&emsp;# equal to prime diagonal sum<br>&emsp;&emsp;if (s != colSum) :<br>&emsp;&emsp;&emsp;return False<br>&emsp;return True<br># Driver Code<br>mat =[<br>&emsp;[5, 3, 7],<br>&emsp;[1, 8, 9],<br>&emsp;[6, 4, 2]<br>]<br>if (isMagicSquare(mat)) :<br>&emsp;print(\"Magic Square\")<br>else :<br>&emsp;print(\"Not a magic Square\")"
	},
	{
		"component": "header",
		"variant": 4,
		"value": "Output:-"
	},
	{
		"component": "text",
		"value": "Not a magic Square"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Rows"
	},
	{
		"component": "text",
		"value": "8 + 3 + 4 = 15<br>1 + 5 + 9 = 15<br>6 + 7 + 2 = 15"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Columns"
	},
	{
		"component": "text",
		"value": "8 + 1 + 6 = 15<br>3 + 5 + 7 = 15<br>4 + 9 + 2 = 15"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Diagonals"
	},
	{
		"component": "text",
		"value": "8 + 5 + 2 = 15<br>4 + 5 + 6 = 15"
	},
	{
		"component": "text",
		"value": "To visualize this sqaure, see it like a square. All the rows have same number of elements. Number of elements in row should be equal to number of elements in a column."
	},
	{
		"component": "text",
		"value": "This is not a magic square :"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "magic_square = [<br>&emsp;[5, 3, 7],<br>&emsp;[1, 8, 9],<br>&emsp;[6, 4, 2]<br>]"
	},
	{
		"component": "text",
		"value": "Rows<br>5 + 3 + 7 = 15<br>1 + 8 + 9 = 18"
	},
	{
		"component": "text",
		"value": "Because the sum of elements of the second row is not 15, therefore this is not a magic square."
	},
	{
		"component": "header",
		"variant": 3,
		"value": "<span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">Edge Case 1</span>"
	},
	{
		"component": "text",
		"value": "Please see that the program that you wrote works for only 3x3 square or it works for any size of square."
	},
	{
		"component": "text",
		"value": "Write this program for square of any size, square of any size so that if a user enters square of any size, your program should give the correct <span style=\"\">output</span>."
	},
	{
		"component": "header",
		"variant": 3,
		"value": "<span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">Edge Case 2</span>"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": "magic_square = [<br>&emsp;[8, 3, 4, 0],<br>&emsp;[1, 5, 9],<br>&emsp;[6, 7, 2]<br>]"
	},
	{
		"component": "text",
		"value": "For this <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">nested list</span>, what will be your answer - <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">True</span> or <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">False</span>. "
	},
	{
		"component": "header",
		"variant": 4,
		"value": "Hint :"
	},
	{
		"component": "text",
		"value": "If the given <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">nested list</span> is not a <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">square</span>, then return <span style=\"color: #eb9371; background-color: rgba(39, 41, 43, 0.83); box-shadow: 2px 2px 2px rgba(22, 9, 1, 0.6); border-radius: 2px; padding: 2px\">False</span>, on the first go."
	}
]