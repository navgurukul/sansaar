{
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key1": "Project: “I’m Feeling Lucky” Google Search",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key2": "Whenever I search a topic on Google, I don’t look at just one search result at a time. By middle-clicking a search result link (or clicking while holding CTRL), I open the first several links in a bunch of new <span style=\"\">tabs</span> to read later. I search Google often enough that this workflow—opening my browser, searching for a topic, and middle-clicking several links one by one—is tedious. It would be nice if I could simply type a search term on the command line and have my computer automatically open a browser with all the top search results in new <span style=\"\">tabs</span>. Let’s write a script to do this.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key3": "This is what your program does:",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key4": "Gets search <span style=\"\">key</span>words from the command line arguments.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key5": "Retrieves the search results page.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key6": "Opens a browser <span style=\"\">tab</span> for each result.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key7": "This means your <span style=\"\">code</span> will need to do the following:",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key8": "Read the command line arguments from sys.argv.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key9": "Fetch the search result page with the requests module.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key10": "Find the links to each search result.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key11": "Call the webbrowser.open() function to open the web browser.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key12": "Open a new <span style=\"\">file</span> <span style=\"\">editor</span> window and <span style=\"\">save</span> it as lucky.py.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key13": "Step 1: Get the Command Line Arguments and Request the Search Page",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key14": "Before coding anything, you first need to know the URL of the search result page. By looking at the browser’s address bar after doing a Google search, you can see that the result page has a URL like <span><a href=\"https://www.google.com/search?q=SEARCH_TERM_HERE\">https://www.google.com/search?q=SEARCH<i>TERM</i>HERE</a></span>. The requests module can download this page and then you can use Beautiful Soup to find the search result links in the HTML. Finally, you’ll use the webbrowser module to open those links in browser <span style=\"\">tabs</span>.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key15": "Make your <span style=\"\">code</span> look like the following:",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key16": "#! python3<br># lucky.py - Opens several Google search results.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key17": "import requests, sys, webbrowser, bs4",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key18": "print('Googling…') # display text while downloading the Google page<br>res = requests.get(<span><a href=\"'http://google.com/search?q=' \">'http://google.com/search?q=' </a></span>+ ' '.join(sys.argv[1:]))<br>res.raise<i>for</i>status()",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key19": "# TODO: Retrieve top search result links.<br><br># TODO: Open a browser tab for each result.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key20": "The user will specify the search terms using command line arguments when they launch the program. These arguments will be stored as <span style=\"\">strings</span> in a list in sys.argv.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key21": "Step 2: Find All the Results",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key22": "Now you need to use Beautiful Soup to extract the top search result links from your downloaded HTML. But how do you figure out the right selector for the job? For example, you can’t just search for all <a> tags, because there are lots of links you don’t care about in the HTML. Instead, you must inspect the search result page with the browser’s developer tools to try to find a selector that will pick out only the links you want.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key23": "After doing a Google search for Beautiful Soup, you can open the browser’s developer tools and inspect some of the link elements on the page. They look incredibly complicated, something like this: <a href=\"/url?sa =t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8& amp;ved=0CCgQFjAA&url=http%3A%2F%2Fwww.crummy.com%2Fsoftware%2FBeautifulSoup %2F&ei=LHBVU_XDD9KVyAShmYDwCw&usg=AFQjCNHAxwplurFOBqg5cehWQEVKi-TuLQ&a mp;sig2=sdZu6WVlBlVSDrwhtworMA\" onmousedown=\"return rwt(this,'','','','1','AFQ jCNHAxwplurFOBqg5cehWQEVKi-TuLQ','sdZu6WVlBlVSDrwhtworMA','0CCgQFjAA','','',ev ent)\" data-href=\"http://www.crummy.com/software/BeautifulSoup/\"><i>Beautiful Soup</i>: We called him Tortoise because he taught us.</a>.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key24": "It doesn’t matter that the element looks incredibly complicated. You just need to find the pattern that all the search result links have. But this <a> element doesn’t have anything that easily distinguishes it from the nonsearch result <a> elements on the page.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key25": "Make your <span style=\"\">code</span> look like the following:",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key26": "#! python3<br># lucky.py - Opens several google search results.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key27": "import requests, sys, webbrowser, bs4",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key28": "--snip--",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key29": "# Retrieve top search result links.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key30": "soup = bs4.BeautifulSoup(res.text)",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key31": "# Open a browser tab for each result.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key32": "linkElems = soup.select('.r a')<br>If you look up a little from the <a> element, though, there is an element like this: <h3 class=\"r\">. Looking through the rest of the HTML source, it looks like the r class is used only for search result links. You don’t have to know what the CSS class r is or what it does. You’re just going to use it as a marker for the <a> element you are looking for. You can create a BeautifulSoup object from the downloaded page’s HTML text and then use the selector '.r a' to find all <a> elements that are within an element that has the r CSS class.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key33": "Step 3: Open Web Browsers for Each Result",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key34": "Finally, we’ll tell the program to open web browser <span style=\"\">tabs</span> for our results. Add the following to the end of your program:",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key35": "#! <span style=\"\">python3</span>",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key36": "lucky.py - Opens several google search results.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key37": "import requests, sys, webbrowser, bs4",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key38": "--snip--",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key39": "Open a browser <span style=\"\">tab</span> for each result.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key40": "linkElems = soup.select('.r a')<br>numOpen = min(5, len(linkElems))<br>for i in range(numOpen):<br>    webbrowser.open(<span><a href=\"'http://google.com' \">'http://google.com' </a></span>+ linkElems[i].get('href'))<br>By default, you open the first five search results in new <span style=\"\">tabs</span> using the webbrowser module. However, the user may have searched for something that turned up fewer than five results. The soup.select() call returns a list of all the elements that matched your '.r a' selector, so the number of <span style=\"\">tabs</span> you want to open is either 5 or the length of this list (whichever is smaller).",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key41": "The built-in <span style=\"\">Python</span> function min() returns the smallest of the <span style=\"\">integer</span> or <span style=\"\">float</span> arguments it is passed. (There is also a built-in max() function that returns the largest argument it is passed.) You can use min() to find out whether there are fewer than five links in the list and store the number of links to open in a <span style=\"\">variable</span> named numOpen. Then you can run through a for <span style=\"\">loop</span> by calling range(numOpen).",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key42": "On each iteration of the <span style=\"\">loop</span>, you use webbrowser.open() to open a new <span style=\"\">tab</span> in the web browser. Note that the href attribute’s value in the returned <a> elements do not have the initial <span><a href=\"http://google.com\">http://google.com</a></span> part, so you have to concatenate that to the href attribute’s <span style=\"\">string</span> value.",
	"web-scraping_project:-“i’m-feeling-lucky”-google-search_key43": "Now you can instantly open the first five Google results for, say, <span style=\"\">Python</span> programming tutorials by running lucky <span style=\"\">python</span> programming tutorials on the command line! (See Appendix B for how to easily run programs on your operating system.)"
}