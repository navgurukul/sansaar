[
	{
		"component": "header",
		"variant": 1,
		"value": "List-like Types: <span style=\"\">Strings</span> and Tuples"
	},
	{
		"component": "text",
		"value": "Lists aren’t the only data types that represent ordered sequences of values. For example, <span style=\"\">strings</span> and lists are actually similar, if you consider a <span style=\"\">string</span> to be a “list” of single text characters. Many of the things you can do with lists can also be done with <span style=\"\">strings</span>: indexing; slicing; and using them with for <span style=\"\">loops</span>, with len(), and with the in and not in <span style=\"\">operators</span>. To see this, enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> name = 'Zophie'<br>>>> name[0]<br>'Z'<br>>>> name[-2]<br>'i'<br>>>> name[0:4]<br>'Zoph'<br>>>> 'Zo' in name<br>True<br>>>> 'z' in name<br>False<br>>>> 'p' not in name<br>False<br>>>> for i in name:<br>&emsp;&emsp;print('* * * ' + i + ' * * *')<br><br>* * * Z * * *<br>* * * o * * *<br>* * * p * * *<br>* * * h * * *<br>* * * i * * *<br>* * * e * * *"
	},
	{
		"component": "text",
		"value": "Mu<span style=\"\">tab</span>le and Immu<span style=\"\">tab</span>le Data Types<br>But lists and <span style=\"\">strings</span> are different in an important way. A list value is a mu<span style=\"\">tab</span>le data type: It can have values added, removed, or changed. However, a <span style=\"\">string</span> is immu<span style=\"\">tab</span>le: It cannot be changed. Trying to reassign a single character in a <span style=\"\">string</span> results in a Type<span style=\"\">Error</span> <span style=\"\">error</span>, as you can see by entering the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> name = 'Zophie a cat'<br>>>> name[7] = 'the'<br>Traceback (most recent call last):<br>  File \"<pyshell#50>\", line 1, in <module><br>&emsp;name[7] = 'the'<br>TypeError: 'str' object does not support item assignment"
	},
	{
		"component": "text",
		"value": "The proper way to “mutate” a <span style=\"\">string</span> is to use slicing and concatenation to build a new <span style=\"\">string</span> by copying from parts of the old <span style=\"\">string</span>. Enter the following into the interactive <span style=\"\">shell</span>:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> name = 'Zophie a cat'<br>>>> newName = name[0:7] + 'the' + name[8:12]<br>>>> name<br>'Zophie a cat'<br>>>> newName<br>'Zophie the cat'"
	},
	{
		"component": "text",
		"value": "We used [0:7] and [8:12] to refer to the characters that we don’t wish to replace. Notice that the original 'Zophie a cat' <span style=\"\">string</span> is not modified because <span style=\"\">strings</span> are immu<span style=\"\">tab</span>le."
	},
	{
		"component": "text",
		"value": "Although a list value is mu<span style=\"\">tab</span>le, the second line in the following <span style=\"\">code</span> does not modify the list eggs:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> eggs = [1, 2, 3]<br>>>> eggs = [4, 5, 6]<br>>>> eggs<br>[4, 5, 6]"
	},
	{
		"component": "text",
		"value": "The list value in eggs isn’t being changed here; rather, an entirely new and different list value ([4, 5, 6]) is overwriting the old list value ([1, 2, 3]). This is depicted in Figure 4-2."
	},
	{
		"component": "text",
		"value": "If you wanted to actually modify the original list in eggs to contain [4, 5, 6], you would have to do something like this:"
	},
	{
		"component": "code",
		"type": "python",
		"title": "",
		"value": ">>> eggs = [1, 2, 3]<br>>>> del eggs[2]<br>>>> del eggs[1]<br>>>> del eggs[0]<br>>>> eggs.append(4)<br>>>> eggs.append(5)<br>>>> eggs.append(6)<br>>>> eggs<br>[4, 5, 6]"
	},
	{
		"component": "text",
		"value": "When eggs = [4, 5, 6] is <span style=\"\">execute</span>d, the contents of eggs are replaced with a new list value."
	},
	{
		"component": "text",
		"value": "In the first example, the list value that eggs ends up with is the same list value it started with. It’s just that this list has been changed, rather than overwritten. Figure 4-3 depicts the seven changes made by the first seven lines in the previous interactive <span style=\"\">shell</span> example."
	},
	{
		"component": "text",
		"value": "The del <span style=\"\">statement</span> and the append() method modify the same list value in place."
	},
	{
		"component": "text",
		"value": "Changing a value of a mu<span style=\"\">tab</span>le data type (like what the del <span style=\"\">statement</span> and append() method do in the previous example) changes the value in place, since the <span style=\"\">variable</span>’s value is not replaced with a new list value."
	},
	{
		"component": "text",
		"value": "Mu<span style=\"\">tab</span>le versus immu<span style=\"\">tab</span>le types may seem like a meaningless distinction, but Passing References will explain the different behavior when calling functions with mu<span style=\"\">tab</span>le arguments versus immu<span style=\"\">tab</span>le arguments. But first, let’s find out about the tuple data type, which is an immu<span style=\"\">tab</span>le form of the list data type."
	}
]