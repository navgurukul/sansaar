[
	{
		"component": "header",
		"variant": 1,
		"value": "Project: Adding Bullets to Wiki Markup"
	},
	{
		"component": "text",
		"value": "When editing a Wikipedia article, you can create a bulleted list by putting each list item on its own line and placing a star in front. But say you have a really large list that you want to add bullet points to. You could just type those stars at the beginning of each line, one by one. Or you could automate this task with a short <span style=\"\">Python</span> script."
	},
	{
		"component": "text",
		"value": "The bulletPointAdder.py script will get the text from the clipboard, add a star and space to the beginning of each line, and then paste this new text to the clipboard. For example, if I copied the following text (for the Wikipedia article “List of Lists of Lists”) to the clipboard:"
	},
	{
		"component": "text",
		"value": "Lists of animals<br>Lists of aquarium life<br>Lists of biologists by author abbreviation<br>Lists of cultivars<br>and then ran the bulletPointAdder.py program, the clipboard would then contain the following:"
	},
	{
		"component": "text",
		"value": "Lists of animals",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "Lists of aquarium life",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "Lists of biologists by author abbreviation",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "text",
		"value": "Lists of cultivarsThis star-prefixed text is ready to be pasted into a Wikipedia article as a bulleted list.",
		"decoration": {
			"type": "number",
			"value": null
		}
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Step 1: Copy and Paste from the Clipboard"
	},
	{
		"component": "text",
		"value": "You want the bulletPointAdder.py program to do the following:"
	},
	{
		"component": "text",
		"value": "Paste text from the clipboard"
	},
	{
		"component": "text",
		"value": "Do something to it"
	},
	{
		"component": "text",
		"value": "Copy the new text to the clipboard"
	},
	{
		"component": "text",
		"value": "That second step is a little tricky, but steps 1 and 3 are pretty straightforward: They just involve the pyperclip.copy() and pyperclip.paste() functions. For now, let’s just write the part of the program that covers steps 1 and 3. Enter the following, saving the program as bulletPointAdder.py:"
	},
	{
		"component": "text",
		"value": "<h1 id=\"spanstylepython3span\">! <span style=\"\">python3</span></h1>"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "bulletPointAdder.py - Adds Wikipedia bullet points to the start"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "of each line of text on the clipboard."
	},
	{
		"component": "text",
		"value": "import pyperclip<br>text = pyperclip.paste()"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "TODO: Separate lines and add stars."
	},
	{
		"component": "text",
		"value": "pyperclip.copy(text)<br>The TODO comment is a reminder that you should complete this part of the program eventually. The next step is to actually implement that piece of the program."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Step 2: Separate the Lines of Text and Add the Star"
	},
	{
		"component": "text",
		"value": "The call to pyperclip.paste() returns all the text on the clipboard as one big <span style=\"\">string</span>. If we used the “List of Lists of Lists” example, the <span style=\"\">string</span> stored in text would look like this:"
	},
	{
		"component": "text",
		"value": "'Lists of animals\\nLists of aquarium life\\nLists of biologists by author<br>abbreviation\\nLists of cultivars'<br>The \\n newline characters in this <span style=\"\">string</span> cause it to be displayed with multiple lines when it is printed or pasted from the clipboard. There are many “lines” in this one <span style=\"\">string</span> value. You want to add a star to the start of each of these lines."
	},
	{
		"component": "text",
		"value": "You could write <span style=\"\">code</span> that searches for each \\n newline character in the <span style=\"\">string</span> and then adds the star just after that. But it would be easier to use the split() method to return a list of <span style=\"\">strings</span>, one for each line in the original <span style=\"\">string</span>, and then add the star to the front of each <span style=\"\">string</span> in the list."
	},
	{
		"component": "text",
		"value": "Make your program look like the following:"
	},
	{
		"component": "text",
		"value": "<h1 id=\"spanstylepython3span\">! <span style=\"\">python3</span></h1>"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "bulletPointAdder.py - Adds Wikipedia bullet points to the start"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "of each line of text on the clipboard."
	},
	{
		"component": "text",
		"value": "import pyperclip<br>text = pyperclip.paste()"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Separate lines and add stars."
	},
	{
		"component": "text",
		"value": "lines = text.split('\\n')<br>for i in range(len(lines)):    # <span style=\"\">loop</span> through all indexes in the \"lines\" list<br>    lines[i] = '* ' + lines[i] # add star to each <span style=\"\">string</span> in \"lines\" list"
	},
	{
		"component": "text",
		"value": "pyperclip.copy(text)<br>We split the text along its newlines to get a list in which each item is one line of the text. We store the list in lines and then <span style=\"\">loop</span> through the items in lines. For each line, we add a star and a space to the start of the line. Now each <span style=\"\">string</span> in lines begins with a star."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Step 3: Join the Modified Lines"
	},
	{
		"component": "text",
		"value": "The lines list now contains modified lines that start with stars. But pyperclip.copy() is expecting a single <span style=\"\">string</span> value, not a list of <span style=\"\">string</span> values. To make this single <span style=\"\">string</span> value, pass lines into the join() method to get a single <span style=\"\">string</span> joined from the list’s <span style=\"\">strings</span>. Make your program look like the following:"
	},
	{
		"component": "text",
		"value": "<h1 id=\"spanstylepython3span\">! <span style=\"\">python3</span></h1>"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "bulletPointAdder.py - Adds Wikipedia bullet points to the start"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "of each line of text on the clipboard."
	},
	{
		"component": "text",
		"value": "import pyperclip<br>text = pyperclip.paste()"
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Separate lines and add stars."
	},
	{
		"component": "text",
		"value": "lines = text.split('\\n')<br>for i in range(len(lines)):    # <span style=\"\">loop</span> through all indexes for \"lines\" list<br>    lines[i] = '* ' + lines[i] # add star to each <span style=\"\">string</span> in \"lines\" list<br>text = '\\n'.join(lines)<br>pyperclip.copy(text)<br>When this program is run, it replaces the text on the clipboard with text that has stars at the start of each line. Now the program is complete, and you can try running it with text copied to the clipboard."
	},
	{
		"component": "text",
		"value": "Even if you don’t need to automate this specific task, you might want to automate some other kind of text manipulation, such as removing trailing spaces from the end of lines or converting text to uppercase or lowercase. Whatever your needs, you can use the clipboard for <span style=\"\">input</span> and <span style=\"\">output</span>."
	},
	{
		"component": "header",
		"variant": 1,
		"value": "Summary"
	},
	{
		"component": "text",
		"value": "Text is a common form of data, and <span style=\"\">Python</span> comes with many helpful <span style=\"\">string</span> methods to process the text stored in <span style=\"\">string</span> values. You will make use of indexing, slicing, and <span style=\"\">string</span> methods in almost every <span style=\"\">Python</span> program you write."
	},
	{
		"component": "text",
		"value": "The programs you are writing now don’t seem too sophisticated—they don’t have graphical user interfaces with images and colorful text. So far, you’re displaying text with print() and letting the user enter text with <span style=\"\">input</span>(). However, the user can quickly enter large amounts of text through the clipboard. This ability provides a useful avenue for writing programs that manipulate massive amounts of text. These text-based programs might not have flashy windows or graphics, but they can get a lot of useful work done quickly."
	},
	{
		"component": "text",
		"value": "Another way to manipulate large amounts of text is reading and writing <span style=\"\">files</span> directly off the hard drive. You’ll learn how to do this with <span style=\"\">Python</span> in the next chapter."
	},
	{
		"component": "text",
		"value": "That just about covers all the basic concepts of <span style=\"\">Python</span> programming! You’ll continue to learn new concepts throughout the rest of this book, but you now know enough to start writing some useful programs that can automate tasks. You might not think you have enough <span style=\"\">Python</span> knowledge to do things such as download web pages, update spreadsheets, or send text messages, but that’s where <span style=\"\">Python</span> modules come in! These modules, written by other programmers, provide functions that make it easy for you to do all these things. So let’s learn how to write real programs to do useful automated tasks."
	}
]